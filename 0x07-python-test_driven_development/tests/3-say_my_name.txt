===========================
How to Use 3-say_my_name.py
===========================

This modules defines a function ``say_my_name(first_name, last_name="")``.

Usage
=====

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

Now use it:
::

    >>> say_my_name = __import__('3-say_my_name').say_my_name

::

    >>> say_my_name("Bob")
    My name is Bob 

::

    >>> say_my_name('John', 'Smith')
    My name is John Smith

::

    >>> say_my_name('Walter', 'White')
    My name is Walter White

::

    >>> say_my_name('12', 'False')
    My name is 12 False

Invalid Names
=============
The parameter ``first_name`` and ``last_name`` must be strings. otherwise
a TypeError is raised

::

    >>> say_my_name(12, 'False')
    Traceback (most recent call last):
    ...
    TypeError: first_name must be strings

::

    >>> say_my_name(12, 15)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be strings

::

    >>> say_my_name(True, False)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be strings

::

    >>> say_my_name()
    Traceback (most recent call last):
    ...
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

::

    >>> say_my_name({'ifeanyi': 32, 'Dog': 34}, 82)
    Traceback (most recent call last):
    ...
    TypeError: first_name must be strings

::

    >>> say_my_name("George", 56)
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string

::

    >>> say_my_name("George", ['pamela', 'pearl', 'joy'])
    Traceback (most recent call last):
    ...
    TypeError: last_name must be a string
